function setCommand(new_cmd) {
    let cmd = document.getElementById("header-command");
    var to_delete = cmd.textContent.length;
    var to_append = new_cmd.length;

    function append() {
        cmd.textContent += s[0];
        new_cmd = s.slice(1);
        to_append--;

        if (to_append > 0) {
            setTimeout(append, 150);
        }
    };

    function delete_() {
        cmd.textContent = cmd.textContent.slice(0, -1);
        to_delete--;

        if (to_delete > 0) {
            setTimeout(delete_, 150);
        } else {

            setTimeout(append, 150);
        }
    };

    setTimeout(delete_, 150);
}

document.addEventListener("DOMContentLoaded", function () {
    let login = document.getElementById("header-login");

    document.getElementById("header-toggle").addEventListener("click", function () {
        if (this.classList.contains("active")) {
            this.classList.remove("active");
            login.classList.remove("active");
        } else {
            this.classList.add("active");
            login.classList.add("active");
        }
    });
});
document.addEventListener("DOMContentLoaded", function () {
    let previews = document.getElementsByClassName("preview-area");
    for (let i = 0; i < previews.length; i++) {
        let preview = previews.item(i);

        let source = preview.parentNode.getElementsByTagName("textarea")[0];
        source.addEventListener("keyup", _.debounce(function () {
            var xhr = new XMLHttpRequest();
            xhr.responseType = "document";
            xhr.open("POST", "/preview_markdown", true);

            xhr.addEventListener("readystatechange", function (e) {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        preview.lastChild.innerHTML = xhr.responseXML.firstElementChild.lastChild.innerHTML;
                        MathJax.Hub.Queue(["Typeset", MathJax.Hub, preview.lastChild.innerHTML]);
                    } else {
                        console.error(xhr.statusText);
                    }
                }
            });

            xhr.send(source.value);
        }, 200));
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci5qcyIsInByZXZpZXcuanMiXSwibmFtZXMiOlsic2V0Q29tbWFuZCIsIm5ld19jbWQiLCJjbWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9fZGVsZXRlIiwidGV4dENvbnRlbnQiLCJsZW5ndGgiLCJ0b19hcHBlbmQiLCJhcHBlbmQiLCJzIiwic2xpY2UiLCJzZXRUaW1lb3V0IiwiZGVsZXRlXyIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2dpbiIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiYWRkIiwicHJldmlld3MiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaSIsInByZXZpZXciLCJpdGVtIiwic291cmNlIiwicGFyZW50Tm9kZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiXyIsImRlYm91bmNlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJvcGVuIiwiZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJsYXN0Q2hpbGQiLCJpbm5lckhUTUwiLCJyZXNwb25zZVhNTCIsImZpcnN0RWxlbWVudENoaWxkIiwiTWF0aEpheCIsIkh1YiIsIlF1ZXVlIiwiY29uc29sZSIsImVycm9yIiwic3RhdHVzVGV4dCIsInNlbmQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkI7QUFDekIsUUFBSUMsTUFBTUMsU0FBU0MsY0FBVCxDQUF3QixnQkFBeEIsQ0FBVjtBQUNBLFFBQUlDLFlBQVlILElBQUlJLFdBQUosQ0FBZ0JDLE1BQWhDO0FBQ0EsUUFBSUMsWUFBWVAsUUFBUU0sTUFBeEI7O0FBRUEsYUFBU0UsTUFBVCxHQUFrQjtBQUNkUCxZQUFJSSxXQUFKLElBQW1CSSxFQUFFLENBQUYsQ0FBbkI7QUFDQVQsa0JBQVVTLEVBQUVDLEtBQUYsQ0FBUSxDQUFSLENBQVY7QUFDQUg7O0FBRUEsWUFBSUEsWUFBWSxDQUFoQixFQUFtQjtBQUNmSSx1QkFBV0gsTUFBWCxFQUFtQixHQUFuQjtBQUNIO0FBQ0o7O0FBRUQsYUFBU0ksT0FBVCxHQUFtQjtBQUNmWCxZQUFJSSxXQUFKLEdBQWtCSixJQUFJSSxXQUFKLENBQWdCSyxLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUFDLENBQTFCLENBQWxCO0FBQ0FOOztBQUVBLFlBQUlBLFlBQVksQ0FBaEIsRUFBbUI7QUFDZk8sdUJBQVdDLE9BQVgsRUFBb0IsR0FBcEI7QUFDSCxTQUZELE1BRU87O0FBRUhELHVCQUFXSCxNQUFYLEVBQW1CLEdBQW5CO0FBQ0g7QUFDSjs7QUFFREcsZUFBV0MsT0FBWCxFQUFvQixHQUFwQjtBQUNIOztBQUVEVixTQUFTVyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBWTtBQUN0RCxRQUFJQyxRQUFRWixTQUFTQyxjQUFULENBQXdCLGNBQXhCLENBQVo7O0FBRUFELGFBQVNDLGNBQVQsQ0FBd0IsZUFBeEIsRUFBeUNVLGdCQUF6QyxDQUEwRCxPQUExRCxFQUFtRSxZQUFZO0FBQzNFLFlBQUksS0FBS0UsU0FBTCxDQUFlQyxRQUFmLENBQXdCLFFBQXhCLENBQUosRUFDQTtBQUNJLGlCQUFLRCxTQUFMLENBQWVFLE1BQWYsQ0FBc0IsUUFBdEI7QUFDQUgsa0JBQU1DLFNBQU4sQ0FBZ0JFLE1BQWhCLENBQXVCLFFBQXZCO0FBQ0gsU0FKRCxNQU1BO0FBQ0ksaUJBQUtGLFNBQUwsQ0FBZUcsR0FBZixDQUFtQixRQUFuQjtBQUNBSixrQkFBTUMsU0FBTixDQUFnQkcsR0FBaEIsQ0FBb0IsUUFBcEI7QUFDSDtBQUNKLEtBWEQ7QUFZSCxDQWZEO0FDOUJBaEIsU0FBU1csZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQVk7QUFDdEQsUUFBSU0sV0FBV2pCLFNBQVNrQixzQkFBVCxDQUFnQyxjQUFoQyxDQUFmO0FBQ0EsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLFNBQVNiLE1BQTdCLEVBQXFDZSxHQUFyQyxFQUNBO0FBQ0ksWUFBSUMsVUFBVUgsU0FBU0ksSUFBVCxDQUFjRixDQUFkLENBQWQ7O0FBRUEsWUFBSUcsU0FBU0YsUUFBUUcsVUFBUixDQUFtQkMsb0JBQW5CLENBQXdDLFVBQXhDLEVBQW9ELENBQXBELENBQWI7QUFDQUYsZUFBT1gsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUNjLEVBQUVDLFFBQUYsQ0FBVyxZQUFZO0FBQ3BELGdCQUFJQyxNQUFNLElBQUlDLGNBQUosRUFBVjtBQUNBRCxnQkFBSUUsWUFBSixHQUFtQixVQUFuQjtBQUNBRixnQkFBSUcsSUFBSixDQUFTLE1BQVQsRUFBaUIsbUJBQWpCLEVBQXNDLElBQXRDOztBQUVBSCxnQkFBSWhCLGdCQUFKLENBQXFCLGtCQUFyQixFQUF5QyxVQUFVb0IsQ0FBVixFQUFhO0FBQ2xELG9CQUFJSixJQUFJSyxVQUFKLElBQWtCLENBQXRCLEVBQ0E7QUFDSSx3QkFBSUwsSUFBSU0sTUFBSixJQUFjLEdBQWxCLEVBQ0E7QUFDSWIsZ0NBQVFjLFNBQVIsQ0FBa0JDLFNBQWxCLEdBQThCUixJQUFJUyxXQUFKLENBQWdCQyxpQkFBaEIsQ0FBa0NILFNBQWxDLENBQTRDQyxTQUExRTtBQUNBRyxnQ0FBUUMsR0FBUixDQUFZQyxLQUFaLENBQWtCLENBQUMsU0FBRCxFQUFZRixRQUFRQyxHQUFwQixFQUF5Qm5CLFFBQVFjLFNBQVIsQ0FBa0JDLFNBQTNDLENBQWxCO0FBQ0gscUJBSkQsTUFNQTtBQUNJTSxnQ0FBUUMsS0FBUixDQUFjZixJQUFJZ0IsVUFBbEI7QUFDSDtBQUNKO0FBQ0osYUFiRDs7QUFlQWhCLGdCQUFJaUIsSUFBSixDQUFTdEIsT0FBT3VCLEtBQWhCO0FBQ0gsU0FyQmdDLEVBcUI5QixHQXJCOEIsQ0FBakM7QUFzQkg7QUFDSixDQTlCRCIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzZXRDb21tYW5kKG5ld19jbWQpIHtcbiAgICBsZXQgY21kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWFkZXItY29tbWFuZFwiKTtcbiAgICB2YXIgdG9fZGVsZXRlID0gY21kLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICB2YXIgdG9fYXBwZW5kID0gbmV3X2NtZC5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgICAgIGNtZC50ZXh0Q29udGVudCArPSBzWzBdO1xuICAgICAgICBuZXdfY21kID0gcy5zbGljZSgxKTtcbiAgICAgICAgdG9fYXBwZW5kLS07XG5cbiAgICAgICAgaWYgKHRvX2FwcGVuZCA+IDApIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoYXBwZW5kLCAxNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZV8oKSB7XG4gICAgICAgIGNtZC50ZXh0Q29udGVudCA9IGNtZC50ZXh0Q29udGVudC5zbGljZSgwLCAtMSk7XG4gICAgICAgIHRvX2RlbGV0ZS0tO1xuXG4gICAgICAgIGlmICh0b19kZWxldGUgPiAwKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGRlbGV0ZV8sIDE1MCk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoYXBwZW5kLCAxNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNldFRpbWVvdXQoZGVsZXRlXywgMTUwKTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGxldCBsb2dpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVhZGVyLWxvZ2luXCIpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWFkZXItdG9nZ2xlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgbG9naW4uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIGxvZ2luLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuIiwiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGxldCBwcmV2aWV3cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJwcmV2aWV3LWFyZWFcIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2aWV3cy5sZW5ndGg7IGkrKylcbiAgICB7XG4gICAgICAgIGxldCBwcmV2aWV3ID0gcHJldmlld3MuaXRlbShpKTtcblxuICAgICAgICBsZXQgc291cmNlID0gcHJldmlldy5wYXJlbnROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGV4dGFyZWFcIilbMF07XG4gICAgICAgIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgXy5kZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0O1xuICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiZG9jdW1lbnRcIjtcbiAgICAgICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCBcIi9wcmV2aWV3X21hcmtkb3duXCIsIHRydWUpO1xuXG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlldy5sYXN0Q2hpbGQuaW5uZXJIVE1MID0geGhyLnJlc3BvbnNlWE1MLmZpcnN0RWxlbWVudENoaWxkLmxhc3RDaGlsZC5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoSmF4Lkh1Yi5RdWV1ZShbXCJUeXBlc2V0XCIsIE1hdGhKYXguSHViLCBwcmV2aWV3Lmxhc3RDaGlsZC5pbm5lckhUTUxdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoeGhyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHhoci5zZW5kKHNvdXJjZS52YWx1ZSk7XG4gICAgICAgIH0sIDIwMCkpO1xuICAgIH1cbn0pO1xuIl19
